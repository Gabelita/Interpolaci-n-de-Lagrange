def lagrange_interpolation(x_points, y_points, x_eval):
    total = 0
    n = len(x_points)
    for i in range(n):
        xi, yi = x_points[i], y_points[i]
        Li = 1
        for j in range(n):
            if i != j:
                Li *= (x_eval - x_points[j]) / (x_points[i] - x_points[j])
        total += yi * Li
    return total

df = pd.read_excel("Proyecto procesamiento.xlsx", sheet_name="Datos")
df.columns = df.columns.str.strip().str.replace('\n', '', regex=True)

x_col = 'Esfuerzo (MPa)'      # Eje X
y_col = 'Deformación (%)'     # Eje Y

df[x_col] = pd.to_numeric(df[x_col], errors='coerce')
df[y_col] = pd.to_numeric(df[y_col], errors='coerce')
n = len(df)

for grado in range(1, 5):
    df[f'Interpolación grado {grado}'] = np.nan
    df[f'Error verdadero grado {grado}'] = np.nan
    df[f'Error relativo (%) grado {grado}'] = np.nan

for i in range(n):
    xi = df.loc[i, x_col]
    yi_real = df.loc[i, y_col]

    # Grado 1 (2 puntos)
    if 0 < i < n - 1:
        x_pts = [df.loc[i - 1, x_col], df.loc[i + 1, x_col]]
        y_pts = [df.loc[i - 1, y_col], df.loc[i + 1, y_col]]
        y_interp = lagrange_interpolation(x_pts, y_pts, xi)
        df.loc[i, 'Interpolación grado 1'] = y_interp
        df.loc[i, 'Error verdadero grado 1'] = yi_real - y_interp
        df.loc[i, 'Error relativo (%) grado 1'] = abs((yi_real - y_interp) / yi_real) * 100

    # Grado 2 (3 puntos)
    if i > 1 and i < n - 1:
        x_pts = [df.loc[i - 2, x_col], df.loc[i - 1, x_col], df.loc[i + 1, x_col]]
        y_pts = [df.loc[i - 2, y_col], df.loc[i - 1, y_col], df.loc[i + 1, y_col]]
        y_interp = lagrange_interpolation(x_pts, y_pts, xi)
        df.loc[i, 'Interpolación grado 2'] = y_interp
        df.loc[i, 'Error verdadero grado 2'] = yi_real - y_interp
        df.loc[i, 'Error relativo (%) grado 2'] = abs((yi_real - y_interp) / yi_real) * 100

    # Grado 3 (4 puntos)
    if i > 2 and i < n - 1:
        x_pts = [df.loc[i - 3, x_col], df.loc[i - 2, x_col], df.loc[i - 1, x_col], df.loc[i + 1, x_col]]
        y_pts = [df.loc[i - 3, y_col], df.loc[i - 2, y_col], df.loc[i - 1, y_col], df.loc[i + 1, y_col]]
        y_interp = lagrange_interpolation(x_pts, y_pts, xi)
        df.loc[i, 'Interpolación grado 3'] = y_interp
        df.loc[i, 'Error verdadero grado 3'] = yi_real - y_interp
        df.loc[i, 'Error relativo (%) grado 3'] = abs((yi_real - y_interp) / yi_real) * 100

    # Grado 4 (5 puntos)
    if i > 2 and i < n - 2:
        x_pts = [df.loc[i - 3, x_col], df.loc[i - 2, x_col], df.loc[i - 1, x_col],
                 df.loc[i + 1, x_col], df.loc[i + 2, x_col]]
        y_pts = [df.loc[i - 3, y_col], df.loc[i - 2, y_col], df.loc[i - 1, y_col],
                 df.loc[i + 1, y_col], df.loc[i + 2, y_col]]
        y_interp = lagrange_interpolation(x_pts, y_pts, xi)
        df.loc[i, 'Interpolación grado 4'] = y_interp
        df.loc[i, 'Error verdadero grado 4'] = yi_real - y_interp
        df.loc[i, 'Error relativo (%) grado 4'] = abs((yi_real - y_interp) / yi_real) * 100


errores_prom = {
    x_col: "—",
    y_col: "—"
}

for grado in range(1, 5):
    prom = df[f'Error relativo (%) grado {grado}'].mean(skipna=True)
    errores_prom[f'Interpolación grado {grado}'] = "—"
    errores_prom[f'Error verdadero grado {grado}'] = "—"
    errores_prom[f'Error relativo (%) grado {grado}'] = prom

df_final = pd.concat([df, pd.DataFrame([errores_prom])], ignore_index=True)


df_final.to_excel("tabla_interpolaciones_con_errores.xlsx", index=False)
print("Archivo generado: tabla_interpolaciones_con_errores.xlsx")

for grado in range(1, 5):
    print(f"Error relativo promedio grado {grado}: {df_final[f'Error relativo (%) grado {grado}'].iloc[-1]:.4f}%")
